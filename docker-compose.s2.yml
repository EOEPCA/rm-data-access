version: "3.6"
services:
  database:
    image: mdillon/postgis:10
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - env/s2.env
      - env/s2_db.env
    environment:
      INSTANCE_ID: "prism-view-server_database"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - intnet
  redis:
    image: redis:latest
    volumes:
      - redis-data:/data
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - intnet
  renderer:
    image: registry.gitlab.eox.at/esa/prism/vs/pvs_core:staging
    volumes:
      - type: tmpfs
        target: /tmp
      - type: volume
        source: instance-data
        target: /var/www/pvs
    env_file:
      - env/s2.env
      - env/s2_db.env
      - env/s2_django.env
      - env/s2_obs.env
    environment:
      INSTANCE_ID: "prism-view-server_renderer"
      INSTALL_DIR: "/var/www/pvs/dev/"
      COLLECT_STATIC: "false"
      INIT_SCRIPTS: "/configure.sh /init-db.sh /initialized.sh"
      STARTUP_SCRIPTS: "/wait-initialized.sh"
      WAIT_SERVICES: "database:5432"
    configs:
      - source: init-db
        target: /init-db.sh
    deploy:
      replicas: 1
    networks:
      - intnet
    command:
      ["/run-httpd.sh"]
  cache:
    image: registry.gitlab.eox.at/esa/prism/vs/pvs_cache:staging
    volumes:
      - type: tmpfs
        target: /tmp
    env_file:
      - env/s2.env
      - env/s2_db.env
      - env/s2_obs.env
    environment:
      INSTANCE_ID: "prism-view-server_cache"
      RENDERER_HOST: renderer
      WAIT_SERVICES: "database:5432 renderer:80"
      WAIT_TIMEOUT: 300  # wait up to 5 minutes
    deploy:
      replicas: 1
    networks:
      - intnet
    command:
      ["/run-httpd.sh"]
  seeder:
    image: registry.gitlab.eox.at/esa/prism/vs/pvs_cache:staging
    volumes:
      - type: tmpfs
        target: /tmp
    env_file:
      - env/s2.env
      - env/s2_obs.env
      - env/s2_redis.env
    environment:
      INSTANCE_ID: "prism-view-server_seeder"
      RENDERER_HOST: renderer
      WAIT_SERVICES: "redis:6379 database:5432"
    deploy:
      replicas: 0
    networks:
      - intnet
    command:
      ["/run-seeder.sh"]
  ingestor:
    image: registry.gitlab.eox.at/esa/prism/vs/pvs_ingestor:staging
    env_file:
      - env/s2_redis.env
    environment:
      INSTANCE_ID: "prism-view-server_ingestor"
    deploy:
      replicas: 1
    networks:
      - intnet
  preprocessor:
    image: registry.gitlab.eox.at/esa/prism/vs/pvs_preprocessor:staging
    env_file:
      - env/s2.env
      - env/s2_obs.env
      - env/s2_redis.env
    environment:
      INSTANCE_ID: "prism-view-server_preprocessor"
      WAIT_SERVICES: "redis:6379"
    configs:
      - source: preprocessor-config
        target: /config.yaml
    deploy:
      replicas: 1
    networks:
      - intnet
    command:
      ["/run-preprocessor.sh"]
  registrar:
    image: eoepca/rm-data-access-core:latest
    volumes:
      - type: tmpfs
        target: /tmp
      - type: volume
        source: instance-data
        target: /var/www/pvs
      - type: volume
        source: report-data
        target: /mnt/reports/
    env_file:
      - env/s2.env
      - env/s2_db.env
      - env/s2_obs.env
      - env/s2_redis.env
    environment:
      INSTANCE_ID: "prism-view-server_registrar"
      INSTALL_DIR: "/var/www/pvs/dev/"
      SCALEFACTOR: "1"
      IN_MEMORY: "false"
      COLLECT_STATIC: "false"
      INIT_SCRIPTS: "/configure.sh /init-db.sh /initialized.sh"
      STARTUP_SCRIPTS: "/wait-initialized.sh"
      WAIT_SERVICES: "redis:6379 database:5432"
      REPORTING_DIR: '/mnt/reports/'
      PYCSW_REPOSITORY_DATABASE_URI: "postgresql://postgres:mypass@catalogue-db/pycsw"
    configs:
      - source: init-db
        target: /init-db.sh
      - source: registrar-config
        target: /config.yaml
    deploy:
      replicas: 1
    networks:
      - intnet
    command:
      ["/run-registrar.sh"]
  catalogue:
    image: geopython/pycsw:latest
    environment:
      #PYCSW_SERVER_URL: http://localhost:8000
      PYCSW_SERVER_URL: http://192.168.1.3:84
      PYCSW_REPOSITORY_DATABASE_URI: "postgresql://postgres:mypass@catalogue-db/pycsw"
    configs:
      - source: pycsw-config
        target: /etc/pycsw/pycsw.cfg
    networks:
      - intnet
    deploy:
      replicas: 1
  catalogue-db:
    image: postgis/postgis:12-3.0-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypass
      POSTGRES_DB: pycsw
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - catalogue-db-data:/var/lib/postgresql/data/pgdata
    networks:
      - intnet
  client:
    image: registry.gitlab.eox.at/esa/prism/vs/pvs_client:staging
    deploy:
      replicas: 1
  endpoint:
    image: endpoint:latest
    env_file:
      - env/s2_endpoint.env
      - env/s2_redis.env
    deploy:
      replicas: 1
    networks:
      - intnet
configs:
  init-db:
    file: ./config/s2_init-db.sh
  mapcache-dev:
    file: ./config/s2_mapcache-dev.xml
  mapcache-ops:
    file: ./config/s2_mapcache-ops.xml
  client-dev:
    file: ./config/s2_index-dev.html
  client-ops:
    file: ./config/s2_index-ops.html
  preprocessor-config:
    file: ./config/s2_preprocessor-config.yml
  registrar-config:
    file: ./config/s2_registrar-config.yml
  pycsw-config:
    file: ./config/pycsw.cfg
volumes:
  db-data:
  catalogue-db-data:
  redis-data:
  instance-data:
  report-data:
networks:
  intnet:
